/*!
  * jQuery JavaScript Library v1.10.1
  * http://jquery.com/
  *
  * Includes Sizzle.js
  * http://sizzlejs.com/
  *
  * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
  * Released under the MIT license
  * http://jquery.org/license
  *
  * Date: 2013-05-30T21:25Z
  */

 /* Sizzle CSS Selector Engine v1.9.4-pre
  * http://sizzlejs.com/
  *
  * Copyright 2013 jQuery Foundation, Inc. and other contributors
  * Released under the MIT license
  * http://jquery.org/license
  *
  * Date: 2013-05-27
  */

(function() {
    "use strict";
    function EventEmitter() {}
    var proto = EventEmitter.prototype;
    function indexOfListener(listeners, listener) {
        var i = listeners.length;
        while (i--) {
            if (listeners[i].listener === listener) {
                return i;
            }
        }
        return -1;
    }
    proto.getListeners = function getListeners(evt) {
        var events = this._getEvents();
        var response;
        var key;
        if (typeof evt === "object") {
            response = {};
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    response[key] = events[key];
                }
            }
        } else {
            response = events[evt] || (events[evt] = []);
        }
        return response;
    };
    proto.flattenListeners = function flattenListeners(listeners) {
        var flatListeners = [];
        var i;
        for (i = 0; i < listeners.length; i += 1) {
            flatListeners.push(listeners[i].listener);
        }
        return flatListeners;
    };
    proto.getListenersAsObject = function getListenersAsObject(evt) {
        var listeners = this.getListeners(evt);
        var response;
        if (listeners instanceof Array) {
            response = {};
            response[evt] = listeners;
        }
        return response || listeners;
    };
    proto.addListener = function addListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var listenerIsWrapped = typeof listener === "object";
        var key;
        for (key in listeners) {
            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
                listeners[key].push(listenerIsWrapped ? listener : {
                    listener: listener,
                    once: false
                });
            }
        }
        return this;
    };
    proto.on = proto.addListener;
    proto.addOnceListener = function addOnceListener(evt, listener) {
        return this.addListener(evt, {
            listener: listener,
            once: true
        });
    };
    proto.once = proto.addOnceListener;
    proto.defineEvent = function defineEvent(evt) {
        this.getListeners(evt);
        return this;
    };
    proto.defineEvents = function defineEvents(evts) {
        for (var i = 0; i < evts.length; i += 1) {
            this.defineEvent(evts[i]);
        }
        return this;
    };
    proto.removeListener = function removeListener(evt, listener) {
        var listeners = this.getListenersAsObject(evt);
        var index;
        var key;
        for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                index = indexOfListener(listeners[key], listener);
                if (index !== -1) {
                    listeners[key].splice(index, 1);
                }
            }
        }
        return this;
    };
    proto.off = proto.removeListener;
    proto.addListeners = function addListeners(evt, listeners) {
        return this.manipulateListeners(false, evt, listeners);
    };
    proto.removeListeners = function removeListeners(evt, listeners) {
        return this.manipulateListeners(true, evt, listeners);
    };
    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
        var i;
        var value;
        var single = remove ? this.removeListener : this.addListener;
        var multiple = remove ? this.removeListeners : this.addListeners;
        if (typeof evt === "object" && !(evt instanceof RegExp)) {
            for (i in evt) {
                if (evt.hasOwnProperty(i) && (value = evt[i])) {
                    if (typeof value === "function") {
                        single.call(this, i, value);
                    } else {
                        multiple.call(this, i, value);
                    }
                }
            }
        } else {
            i = listeners.length;
            while (i--) {
                single.call(this, evt, listeners[i]);
            }
        }
        return this;
    };
    proto.removeEvent = function removeEvent(evt) {
        var type = typeof evt;
        var events = this._getEvents();
        var key;
        if (type === "string") {
            delete events[evt];
        } else if (type === "object") {
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    delete events[key];
                }
            }
        } else {
            delete this._events;
        }
        return this;
    };
    proto.emitEvent = function emitEvent(evt, args) {
        var listeners = this.getListenersAsObject(evt);
        var listener;
        var i;
        var key;
        var response;
        for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                i = listeners[key].length;
                while (i--) {
                    listener = listeners[key][i];
                    response = listener.listener.apply(this, args || []);
                    if (response === this._getOnceReturnValue() || listener.once === true) {
                        this.removeListener(evt, listeners[key][i].listener);
                    }
                }
            }
        }
        return this;
    };
    proto.trigger = proto.emitEvent;
    proto.emit = function emit(evt) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.emitEvent(evt, args);
    };
    proto.setOnceReturnValue = function setOnceReturnValue(value) {
        this._onceReturnValue = value;
        return this;
    };
    proto._getOnceReturnValue = function _getOnceReturnValue() {
        if (this.hasOwnProperty("_onceReturnValue")) {
            return this._onceReturnValue;
        } else {
            return true;
        }
    };
    proto._getEvents = function _getEvents() {
        return this._events || (this._events = {});
    };
    if (typeof define === "function" && define.amd) {
        define(function() {
            return EventEmitter;
        });
    } else if (typeof module !== "undefined" && module.exports) {
        module.exports = EventEmitter;
    } else {
        this.EventEmitter = EventEmitter;
    }
}).call(this);

(function(window) {
    "use strict";
    var docElem = document.documentElement;
    var bind = function() {};
    if (docElem.addEventListener) {
        bind = function(obj, type, fn) {
            obj.addEventListener(type, fn, false);
        };
    } else if (docElem.attachEvent) {
        bind = function(obj, type, fn) {
            obj[type + fn] = fn.handleEvent ? function() {
                var event = window.event;
                event.target = event.target || event.srcElement;
                fn.handleEvent.call(fn, event);
            } : function() {
                var event = window.event;
                event.target = event.target || event.srcElement;
                fn.call(obj, event);
            };
            obj.attachEvent("on" + type, obj[type + fn]);
        };
    }
    var unbind = function() {};
    if (docElem.removeEventListener) {
        unbind = function(obj, type, fn) {
            obj.removeEventListener(type, fn, false);
        };
    } else if (docElem.detachEvent) {
        unbind = function(obj, type, fn) {
            obj.detachEvent("on" + type, obj[type + fn]);
            try {
                delete obj[type + fn];
            } catch (err) {
                obj[type + fn] = undefined;
            }
        };
    }
    var eventie = {
        bind: bind,
        unbind: unbind
    };
    if (typeof define === "function" && define.amd) {
        define(eventie);
    } else {
        window.eventie = eventie;
    }
})(this);

(function(window) {
    "use strict";
    var $ = window.jQuery;
    var console = window.console;
    var hasConsole = typeof console !== "undefined";
    function extend(a, b) {
        for (var prop in b) {
            a[prop] = b[prop];
        }
        return a;
    }
    var objToString = Object.prototype.toString;
    function isArray(obj) {
        return objToString.call(obj) === "[object Array]";
    }
    function makeArray(obj) {
        var ary = [];
        if (isArray(obj)) {
            ary = obj;
        } else if (typeof obj.length === "number") {
            for (var i = 0, len = obj.length; i < len; i++) {
                ary.push(obj[i]);
            }
        } else {
            ary.push(obj);
        }
        return ary;
    }
    function defineImagesLoaded(EventEmitter, eventie) {
        function ImagesLoaded(elem, options, onAlways) {
            if (!(this instanceof ImagesLoaded)) {
                return new ImagesLoaded(elem, options);
            }
            if (typeof elem === "string") {
                elem = document.querySelectorAll(elem);
            }
            this.elements = makeArray(elem);
            this.options = extend({}, this.options);
            if (typeof options === "function") {
                onAlways = options;
            } else {
                extend(this.options, options);
            }
            if (onAlways) {
                this.on("always", onAlways);
            }
            this.getImages();
            if ($) {
                this.jqDeferred = new $.Deferred();
            }
            var _this = this;
            setTimeout(function() {
                _this.check();
            });
        }
        ImagesLoaded.prototype = new EventEmitter();
        ImagesLoaded.prototype.options = {};
        ImagesLoaded.prototype.getImages = function() {
            this.images = [];
            for (var i = 0, len = this.elements.length; i < len; i++) {
                var elem = this.elements[i];
                if (elem.nodeName === "IMG") {
                    this.addImage(elem);
                }
                var childElems = elem.querySelectorAll("img");
                for (var j = 0, jLen = childElems.length; j < jLen; j++) {
                    var img = childElems[j];
                    this.addImage(img);
                }
            }
        };
        ImagesLoaded.prototype.addImage = function(img) {
            var loadingImage = new LoadingImage(img);
            this.images.push(loadingImage);
        };
        ImagesLoaded.prototype.check = function() {
            var _this = this;
            var checkedCount = 0;
            var length = this.images.length;
            this.hasAnyBroken = false;
            function onConfirm(image, message) {
                if (_this.options.debug && hasConsole) {
                    console.log("confirm", image, message);
                }
                _this.progress(image);
                checkedCount++;
                if (checkedCount === length) {
                    _this.complete();
                }
                return true;
            }
            for (var i = 0; i < length; i++) {
                var loadingImage = this.images[i];
                loadingImage.on("confirm", onConfirm);
                loadingImage.check();
            }
        };
        ImagesLoaded.prototype.progress = function(image) {
            this.hasAnyBroken = this.hasAnyBroken || !image.isLoaded;
            this.emit("progress", this, image);
            if (this.jqDeferred) {
                this.jqDeferred.notify(this, image);
            }
        };
        ImagesLoaded.prototype.complete = function() {
            var eventName = this.hasAnyBroken ? "fail" : "done";
            this.isComplete = true;
            this.emit(eventName, this);
            this.emit("always", this);
            if (this.jqDeferred) {
                var jqMethod = this.hasAnyBroken ? "reject" : "resolve";
                this.jqDeferred[jqMethod](this);
            }
        };
        if ($) {
            $.fn.imagesLoaded = function(options, callback) {
                var instance = new ImagesLoaded(this, options, callback);
                return instance.jqDeferred.promise($(this));
            };
        }
        var cache = {};
        function LoadingImage(img) {
            this.img = img;
        }
        LoadingImage.prototype = new EventEmitter();
        LoadingImage.prototype.check = function() {
            var cached = cache[this.img.src];
            if (cached) {
                this.useCached(cached);
                return;
            }
            cache[this.img.src] = this;
            if (this.img.complete && this.img.naturalWidth !== undefined) {
                this.confirm(this.img.naturalWidth !== 0, "naturalWidth");
                return;
            }
            var proxyImage = this.proxyImage = new Image();
            eventie.bind(proxyImage, "load", this);
            eventie.bind(proxyImage, "error", this);
            proxyImage.src = this.img.src;
        };
        LoadingImage.prototype.useCached = function(cached) {
            if (cached.isConfirmed) {
                this.confirm(cached.isLoaded, "cached was confirmed");
            } else {
                var _this = this;
                cached.on("confirm", function(image) {
                    _this.confirm(image.isLoaded, "cache emitted confirmed");
                    return true;
                });
            }
        };
        LoadingImage.prototype.confirm = function(isLoaded, message) {
            this.isConfirmed = true;
            this.isLoaded = isLoaded;
            this.emit("confirm", this, message);
        };
        LoadingImage.prototype.handleEvent = function(event) {
            var method = "on" + event.type;
            if (this[method]) {
                this[method](event);
            }
        };
        LoadingImage.prototype.onload = function() {
            this.confirm(true, "onload");
            this.unbindProxyEvents();
        };
        LoadingImage.prototype.onerror = function() {
            this.confirm(false, "onerror");
            this.unbindProxyEvents();
        };
        LoadingImage.prototype.unbindProxyEvents = function() {
            eventie.unbind(this.proxyImage, "load", this);
            eventie.unbind(this.proxyImage, "error", this);
        };
        return ImagesLoaded;
    }
    if (typeof define === "function" && define.amd) {
        define([ "eventEmitter", "eventie" ], defineImagesLoaded);
    } else {
        window.imagesLoaded = defineImagesLoaded(window.EventEmitter, window.eventie);
    }
})(window);

(function(a) {
    (jQuery.browser = jQuery.browser || {}).mobile = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4));
})(navigator.userAgent || navigator.vendor || window.opera);

(function($) {
    $.BigVideo = function(options) {
        var defaults = {
            useFlashForFirefox: true,
            forceAutoplay: false,
            controls: false,
            doLoop: true,
            container: $("body")
        };
        var BigVideo = this, player, vidEl = "#big-video-vid", wrap = $('<div id="big-video-wrap"></div>'), video = $(""), mediaAspect = 16 / 9, vidDur = 0, defaultVolume = .8, isInitialized = false, isSeeking = false, isPlaying = false, isQueued = false, isAmbient = false, playlist = [], currMediaIndex, currMediaType;
        var settings = $.extend({}, defaults, options);
        function updateSize() {
            var windowW = $(window).width();
            var windowH = $(window).height();
            var windowAspect = windowW / windowH;
            if (windowAspect < mediaAspect) {
                if (currMediaType === "video") {
                    player.width(windowH * mediaAspect).height(windowH);
                    $(vidEl).css("top", 0).css("left", -(windowH * mediaAspect - windowW) / 2).css("height", windowH);
                    $(vidEl + "_html5_api").css("width", windowH * mediaAspect);
                    $(vidEl + "_flash_api").css("width", windowH * mediaAspect).css("height", windowH);
                } else {
                    $("#big-video-image").css({
                        width: "auto",
                        height: windowH,
                        top: 0,
                        left: -(windowH * mediaAspect - windowW) / 2
                    });
                }
            } else {
                if (currMediaType === "video") {
                    player.width(windowW).height(windowW / mediaAspect);
                    $(vidEl).css("top", -(windowW / mediaAspect - windowH) / 2).css("left", 0).css("height", windowW / mediaAspect);
                    $(vidEl + "_html5_api").css("width", "100%");
                    $(vidEl + "_flash_api").css("width", windowW).css("height", windowW / mediaAspect);
                } else {
                    $("#big-video-image").css({
                        width: windowW,
                        height: "auto",
                        top: -(windowW / mediaAspect - windowH) / 2,
                        left: 0
                    });
                }
            }
        }
        function initPlayControl() {
            var markup = '<div id="big-video-control-container">';
            markup += '<div id="big-video-control">';
            markup += '<a href="#" id="big-video-control-play"></a>';
            markup += '<div id="big-video-control-middle">';
            markup += '<div id="big-video-control-bar">';
            markup += '<div id="big-video-control-bound-left"></div>';
            markup += '<div id="big-video-control-progress"></div>';
            markup += '<div id="big-video-control-track"></div>';
            markup += '<div id="big-video-control-bound-right"></div>';
            markup += "</div>";
            markup += "</div>";
            markup += '<div id="big-video-control-timer"></div>';
            markup += "</div>";
            markup += "</div>";
            settings.container.append(markup);
            $("#big-video-control-container").css("display", "none");
            $("#big-video-control-track").slider({
                animate: true,
                step: .01,
                slide: function(e, ui) {
                    isSeeking = true;
                    $("#big-video-control-progress").css("width", ui.value - .16 + "%");
                    player.currentTime(ui.value / 100 * player.duration());
                },
                stop: function(e, ui) {
                    isSeeking = false;
                    player.currentTime(ui.value / 100 * player.duration());
                }
            });
            $("#big-video-control-bar").click(function(e) {
                player.currentTime(e.offsetX / $(this).width() * player.duration());
            });
            $("#big-video-control-play").click(function(e) {
                e.preventDefault();
                playControl("toggle");
            });
            player.on("timeupdate", function() {
                if (!isSeeking && player.currentTime() / player.duration()) {
                    var currTime = player.currentTime();
                    var minutes = Math.floor(currTime / 60);
                    var seconds = Math.floor(currTime) - 60 * minutes;
                    if (seconds < 10) seconds = "0" + seconds;
                    var progress = player.currentTime() / player.duration() * 100;
                    $("#big-video-control-track").slider("value", progress);
                    $("#big-video-control-progress").css("width", progress - .16 + "%");
                    $("#big-video-control-timer").text(minutes + ":" + seconds + "/" + vidDur);
                }
            });
        }
        function playControl(a) {
            var action = a || "toggle";
            if (action === "toggle") action = isPlaying ? "pause" : "play";
            if (action === "pause") {
                player.pause();
                $("#big-video-control-play").css("background-position", "-16px");
                isPlaying = false;
            } else if (action === "play") {
                player.play();
                $("#big-video-control-play").css("background-position", "0");
                isPlaying = true;
            }
        }
        function setUpAutoPlay() {
            player.play();
            settings.container.off("click", setUpAutoPlay);
        }
        function nextMedia() {
            currMediaIndex++;
            if (currMediaIndex === playlist.length) currMediaIndex = 0;
            playVideo(playlist[currMediaIndex]);
        }
        function playVideo(source) {
            $(vidEl).css("display", "block");
            currMediaType = "video";
            player.src(source);
            isPlaying = true;
            if (isAmbient) {
                $("#big-video-control-container").css("display", "none");
                player.ready(function() {
                    player.volume(0);
                });
                doLoop = true;
            } else {
                $("#big-video-control-container").css("display", "block");
                player.ready(function() {
                    player.volume(defaultVolume);
                });
                doLoop = true;
            }
            $("#big-video-image").css("display", "none");
            $(vidEl).css("display", "block");
        }
        function showPoster(source) {
            $("#big-video-image").remove();
            player.pause();
            $(vidEl).css("display", "none");
            $("#big-video-control-container").css("display", "none");
            currMediaType = "image";
            var bgImage = $('<img id="big-video-image" src=' + source + " />");
            wrap.append(bgImage);
            $("#big-video-image").imagesLoaded(function() {
                mediaAspect = $("#big-video-image").width() / $("#big-video-image").height();
                updateSize();
            });
        }
        BigVideo.init = function() {
            if (!isInitialized) {
                settings.container.prepend(wrap);
                var autoPlayString = settings.forceAutoplay ? "autoplay" : "";
                player = $('<video id="' + vidEl.substr(1) + '" class="video-js vjs-default-skin" preload="auto" data-setup="{}" ' + autoPlayString + " webkit-playsinline></video>");
                player.css("position", "absolute");
                wrap.append(player);
                var videoTechOrder = [ "html5", "flash" ];
                var ua = navigator.userAgent.toLowerCase();
                var isFirefox = ua.indexOf("firefox") != -1;
                if (settings.useFlashForFirefox && isFirefox) {
                    videoTechOrder = [ "flash", "html5" ];
                }
                player = videojs(vidEl.substr(1), {
                    controls: false,
                    autoplay: true,
                    preload: "auto",
                    techOrder: videoTechOrder
                });
                if (settings.controls) initPlayControl();
                updateSize();
                isInitialized = true;
                isPlaying = false;
                if (settings.forceAutoplay) {
                    $("body").on("click", setUpAutoPlay);
                }
                $("#big-video-vid_flash_api").attr("scale", "noborder").attr("width", "100%").attr("height", "100%");
                $(window).resize(function() {
                    updateSize();
                });
                player.on("loadedmetadata", function(data) {
                    if (document.getElementById("big-video-vid_flash_api")) {
                        mediaAspect = document.getElementById("big-video-vid_flash_api").vjs_getProperty("videoWidth") / document.getElementById("big-video-vid_flash_api").vjs_getProperty("videoHeight");
                    } else {
                        mediaAspect = $("#big-video-vid_html5_api").prop("videoWidth") / $("#big-video-vid_html5_api").prop("videoHeight");
                    }
                    updateSize();
                    var dur = Math.round(player.duration());
                    var durMinutes = Math.floor(dur / 60);
                    var durSeconds = dur - durMinutes * 60;
                    if (durSeconds < 10) durSeconds = "0" + durSeconds;
                    vidDur = durMinutes + ":" + durSeconds;
                });
                player.on("ended", function() {
                    if (settings.doLoop) {
                        player.currentTime(0);
                        player.play();
                    }
                    if (isQueued) {
                        nextMedia();
                    }
                });
            }
        };
        BigVideo.show = function(source, options) {
            if (options === undefined) options = {};
            isAmbient = options.ambient === true;
            if (isAmbient || options.doLoop) settings.doLoop = true;
            if (typeof source === "string") {
                var ext = source.substring(source.lastIndexOf(".") + 1);
                if (ext === "jpg" || ext === "gif" || ext === "png") {
                    showPoster(source);
                } else {
                    if (options.altSource && navigator.userAgent.toLowerCase().indexOf("firefox") > -1) {
                        source = options.altSource;
                    }
                    playVideo(source);
                    isQueued = false;
                }
            } else {
                playlist = source;
                currMediaIndex = 0;
                playVideo(playlist[currMediaIndex]);
                isQueued = true;
            }
        };
        BigVideo.getPlayer = function() {
            return player;
        };
        BigVideo.triggerPlayer = function(action) {
            playControl(action);
        };
    };
})(jQuery);

(function() {
    var method;
    var noop = function() {};
    var methods = [ "assert", "clear", "count", "debug", "dir", "dirxml", "error", "exception", "group", "groupCollapsed", "groupEnd", "info", "log", "markTimeline", "profile", "profileEnd", "table", "time", "timeEnd", "timeStamp", "trace", "warn" ];
    var length = methods.length;
    var console = window.console = window.console || {};
    while (length--) {
        method = methods[length];
        if (!console[method]) {
            console[method] = noop;
        }
    }
})();

(function($) {
    $.fn.fitText = function(kompressor, options) {
        var compressor = kompressor || 1, settings = $.extend({
            minFontSize: Number.NEGATIVE_INFINITY,
            maxFontSize: Number.POSITIVE_INFINITY
        }, options);
        return this.each(function() {
            var $this = $(this);
            var resizer = function() {
                var fontSize = Math.max(Math.min($this.width() / (compressor * 10), parseFloat(settings.maxFontSize)), parseFloat(settings.minFontSize));
                $this.css("font-size", fontSize > 72 ? 72 : fontSize);
            };
            resizer();
            $(window).on("resize.fittext orientationchange.fittext", resizer);
        });
    };
})(jQuery);

var BV = new $.BigVideo();

$(function() {
    videojs.options.flash.swf = "/video-js.swf";
    var isMobile = $.browser.mobile, volume = 1, bg;
    BV.init();
    bg = isMobile ? "/static/img/hBqv0KrQ6pa.gif" : "/static/vid/hBqv0KrQ6pa.mp4";
    BV.show(bg, {
        altSource: bg.replace("mp4", "ogv")
    });
    $("nav").fitText(1.5);
    $("nav a").on("click", function(ev) {
        var target = $(this).attr("class").replace(" active", "");
        $(this).addClass("active").siblings().removeClass("active");
        $("section").removeClass("active");
        $("section." + target).addClass("active");
        bg = isMobile ? $(this).attr("data-pic") : $(this).attr("data-vid");
        BV.show(bg, {
            altSource: bg.replace("mp4", "ogv")
        });
        if ($(this).hasClass("rsvp")) {
            $("#name").focus();
        }
        ev.preventDefault();
    });
    $("#big-video-vid").on("click", function() {
        BV.getPlayer().volume(volume ^= 1);
    });
    $("#attending").on("change", function() {
        var $deets = $(".additional-details");
        if ($(this).val() === "Yes") {
            $deets.show();
        } else {
            $deets.hide();
        }
    });
    $("form.rsvp").on("submit", function() {
        var $req = $(".required"), $name = $("#name"), $attending = $("#attending");
        if ($name.val().length < 3) {
            $name.addClass("missing").attr("placeholder", "").focus();
            return false;
        }
        if ($attending.val().length < 2) {
            $attending.addClass("missing").focus();
            return false;
        }
    });
});